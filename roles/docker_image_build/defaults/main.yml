# the if logic is in place to grab inventory vars about the host we connect to (docker_build_hosts), vs the host we're operating about (docker_services)
# by default build in the user's home directory
docker_build_path: "{{ hostvars[ansible_host]['docker_build_path'] if 'docker_build_path' in hostvars[ansible_host] else '~' }}"

ubuntu_tag: latest

timezone: UTC

splunk_home: /opt/splunk
splunk_user: splunk
splunk_user_id: 8089
splunk_group: splunk
splunk_group_id: 8089

common_staging_paths: {}
host_staging_paths: {}

common_apt_packages: []
host_apt_packages: []

common_stage_items: []
host_stage_items: []

common_indexed_fields: {}
host_indexed_fields: {}

common_run_commands: []
host_run_commands: []

common_build_variants: []
host_build_variants: []

# these had to be placed in group_vars/docker_services such that they are also available to docker_service_deploy
#common_volumes: []
#host_volumes: []

kvstore_disabled: true

# these are the defaults from https://docs.docker.com/engine/reference/builder/#healthcheck
healthcheck_interval_seconds: 30
healthcheck_timeout_seconds: 30
# this differs from the documented default of 0
# when explicitly specifying 0s for --start-period, this error results:
#   Interval "start-period" cannot be less than 1ms
healthcheck_start_period_seconds: 1
healthcheck_retries: 3

healthcheck_command: |-
  {% if metrics_healthchecks %}
  python3 {{ splunk_home }}/metrics_healthcheck.py
  {% endif %}

entrypoint: "{{ splunk_home }}/entrypoint.sh"
# by default run entrypoint as splunk user
entrypoint_user: "{{ splunk_user_id }}:{{ splunk_group_id }}"

# the provided entrypoint.sh (defined above) runs splunk
# if install_splunk is set to false entrypoint also needs to be overridden
install_splunk: true

# set to false if you have a configuration that is known not to pass btool check,
# but should successfully build anyway (TAs with incomplete README/ contents, etc.)
btool_check: true
